// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tda_proj.Data;

#nullable disable

namespace tda_proj.Migrations
{
    [DbContext(typeof(tdaContext))]
    partial class tdaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("tda_proj.Model.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LectorUUID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("LectorUUID")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("tda_proj.Model.ContactEmail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("tda_proj.Model.ContactTelNumber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("TelNumbers");
                });

            modelBuilder.Entity("tda_proj.Model.Lector", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("lower(hex(randomblob(4))) || '-' || lower(hex(randomblob(2))) || '-' || '4' || substr(lower(hex(randomblob(2))), 2) || '-' || 'a' || substr(lower(hex(randomblob(2))), 2) || '-' || lower(hex(randomblob(6)))");

                    b.Property<string>("bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("claims")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("middleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("pictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("pricePerHour")
                        .HasColumnType("REAL");

                    b.HasKey("UUID");

                    b.ToTable("Lectors");
                });

            modelBuilder.Entity("tda_proj.Model.LectorTag", b =>
                {
                    b.Property<Guid>("LectorTagUUID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LectorUUID")
                        .HasColumnType("TEXT");

                    b.HasKey("LectorTagUUID", "LectorUUID");

                    b.HasIndex("LectorUUID");

                    b.ToTable("LectorTags");
                });

            modelBuilder.Entity("tda_proj.Model.Tag", b =>
                {
                    b.Property<Guid>("TagUUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("lower(hex(randomblob(4))) || '-' || lower(hex(randomblob(2))) || '-' || '4' || substr(lower(hex(randomblob(2))), 2) || '-' || 'a' || substr(lower(hex(randomblob(2))), 2) || '-' || lower(hex(randomblob(6)))");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagUUID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("tda_proj.Model.TitleAfter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LectorUUID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("LectorUUID");

                    b.ToTable("TitlesAfter");
                });

            modelBuilder.Entity("tda_proj.Model.TitleBefore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LectorUUID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("LectorUUID");

                    b.ToTable("TitlesBefore");
                });

            modelBuilder.Entity("tda_proj.Model.Contact", b =>
                {
                    b.HasOne("tda_proj.Model.Lector", "Lector")
                        .WithOne("Contact")
                        .HasForeignKey("tda_proj.Model.Contact", "LectorUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lector");
                });

            modelBuilder.Entity("tda_proj.Model.ContactEmail", b =>
                {
                    b.HasOne("tda_proj.Model.Contact", "Contact")
                        .WithMany("Emails")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("tda_proj.Model.ContactTelNumber", b =>
                {
                    b.HasOne("tda_proj.Model.Contact", "Contact")
                        .WithMany("TelNumbers")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("tda_proj.Model.LectorTag", b =>
                {
                    b.HasOne("tda_proj.Model.Tag", "Tag")
                        .WithMany("Tags")
                        .HasForeignKey("LectorTagUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tda_proj.Model.Lector", "Lector")
                        .WithMany("lectorTags")
                        .HasForeignKey("LectorUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lector");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("tda_proj.Model.TitleAfter", b =>
                {
                    b.HasOne("tda_proj.Model.Lector", "lector")
                        .WithMany("titlesAfter")
                        .HasForeignKey("LectorUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lector");
                });

            modelBuilder.Entity("tda_proj.Model.TitleBefore", b =>
                {
                    b.HasOne("tda_proj.Model.Lector", "lector")
                        .WithMany("titlesBefore")
                        .HasForeignKey("LectorUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lector");
                });

            modelBuilder.Entity("tda_proj.Model.Contact", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("TelNumbers");
                });

            modelBuilder.Entity("tda_proj.Model.Lector", b =>
                {
                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("lectorTags");

                    b.Navigation("titlesAfter");

                    b.Navigation("titlesBefore");
                });

            modelBuilder.Entity("tda_proj.Model.Tag", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
