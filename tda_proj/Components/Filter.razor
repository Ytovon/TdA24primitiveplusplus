@using tda_proj.Model;
@using tda_proj.Service;

@inject IJSRuntime js;

<div class="@(IsFilterShown ? "filter filter--open" : "filter")">
    <h2 class="filter_title"><i class="fa-solid fa-filter fa-xs"></i>Filtrace</h2>

    <div class="filter_main">
        <i class="fa-solid fa-xmark x-mark" @onclick="ShowFilter"></i>

            <tda_proj.Components.PriceRange/>

            <span class="tags_location">
            <tda_proj.Components.FilterTags allTags="allTags" />

            <tda_proj.Components.Location OnValueSent="HandleValueFromChild" IsFilteringOn=IsFilteringOn />
            </span>

    </div>
</div>

<button class="@(IsFilterShown ? "filter_btn filter_btn--hidden" : "filter_btn")" @onclick="ShowFilter"><i class="fa-solid fa-filter fa-2xl"></i></button>

@code{
    //passing data to parent
    [Parameter] public Action<List<string>> OnValueSentFilter { get; set; }

    private async Task SendToParent(List<string> value) 
    {
        OnValueSentFilter?.Invoke(value);
    }

    // gets value from map and sends it to Index.razor
    private async void HandleValueFromChild(List<string> value)
    {
        SendToParent(value);
        StateHasChanged();
    }    


    //components variables
    private List<string> allLocations = new List<string>();
    private List<string> chosenLocations = new List<string>();
    private List<Tag> allTags = new List<Tag>();

    private List<Lector> allLectors = new List<Lector>();
    LectorService lectorService = new LectorService();

    // filter variable
    private bool IsFilterShown = false;

   [Parameter]
    public bool IsFilteringOn { get; set; } = false;

    // for showing filter
    private void ShowFilter()
    {
        IsFilterShown = !IsFilterShown;
    }

    // map creation from js
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("initMap", allLocations);
        }
    }  

    // on initialized method
    protected override async Task OnInitializedAsync()
    {

        allLectors = await lectorService.GetAllLectorsAsync();


        // getting all prices into prices list
        foreach (var lector in allLectors)
        {
            allLocations.Add(lector.location);
            allTags.AddRange(lector.lectorTags.Select(lt => lt.Tag).ToList());
        }

        // alphabetic ordering
        allTags = allTags.OrderBy(tag => tag.TagName).ToList();

    }
}