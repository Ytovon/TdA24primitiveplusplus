﻿@using tda_proj.Model;
@using tda_proj.Service;


@page "/"
@inject IJSRuntime js;

<head>
    <link href="css/main-page.css" rel="stylesheet" />
    <script src="~/js/map.js"></script>
</head>
<body>
    <main>
            <tda_proj.Components.Filter OnValueSentFilter="HandleValueFromChild" IsFilteringOn=IsFilteringOn/>

            <div class="cards background_image">


                @foreach (var lector in allLectors)
                {
                    Tags = lector.lectorTags.Select(lt => lt.Tag).ToList();

                    <div class="card">
                        <NavLink href=@($"lecturer/{lector.UUID}") class="info"><i class="fa-solid fa-circle-info"></i></NavLink>
                        <img src="@lector.pictureUrl">
                       

                        @*  header *@
                        <h1 class="title">
                            @foreach (var titleBefore in lector.titlesBefore)
                            {
                                @titleBefore.Title
                            }

                            <h1>
                                @lector.firstName
                                @lector.middleName
                                @lector.lastName
                            </h1>

                            @foreach (var titleAfter in lector.titlesAfter)
                            {
                                @titleAfter.Title
                            }
                        </h1>


                        @* claim *@
                        <div class="subtitle">
                            @lector.claims
                        </div>

                        <div class="contacts">
                            <p><span class="special_text1"><i class="fa-solid fa-location-dot fa-xl"></i></span>  @lector.location</p>
                            <p> | </p>
                            <p>Cena za hodinu: <span class="special_text1">@lector.pricePerHour Kč</span></p>
                        </div>

                        <div class="tags" @ref="tagsContainer">
                            <button class="prev_btn btn" @onclick="ScrollLeft"><i class="fa-solid fa-chevron-left"></i></button>

                            @foreach (var tag in Tags)
                            {
                                <p class="tag">@tag.TagName</p>
                            }

                            <button class="next_btn btn" @onclick="ScrollRight"><i class="fa-solid fa-chevron-right"></i></button>
                        </div>
                    </div>
                }

            </div>
        }
<<<<<<< HEAD
=======
        //if filtrating is on
        else
        {
            <h1>filtrování zapnuto!</h1>

            <tda_proj.Components.Filter OnValueSentFilter="HandleValueFromChild" />

            //if lector is null
            @if (specificLectors == null)
            {
                <p>Zadanému filtru neodpovídá jediný lektor</p>
            }
            else
            {
                <div class="cards background_image">
                    @foreach (var lector in specificLectors)
                    {
                        Tags = lector.lectorTags.Select(lt => lt.Tag).ToList();

                        <div class="card">
                            <NavLink href=@($"lecturer/{lector.UUID}") class="info"><i class="fa-solid fa-circle-info"></i></NavLink>
                            <img src="@lector.pictureUrl">

                            @*  header *@
                            <h1 class="title">
                                @foreach (var titleBefore in lector.titlesBefore)
                                {
                                    @titleBefore.Title
                                }

                                <h1>
                                    @lector.firstName
                                    @lector.middleName
                                    @lector.lastName
                                </h1>

                                @foreach (var titleAfter in lector.titlesAfter)
                                {
                                    @titleAfter.Title
                                }
                            </h1>


                            @* claim *@
                            <div class="subtitle">
                                @lector.claims;
                            </div>

                            <div class="contacts">
                                <p><span class="special_text1"><i class="fa-solid fa-location-dot fa-xl"></i></span>  @lector.location</p>
                                <p> | </p>
                                <p>Cena za hodinu: <span class="special_text1">@lector.pricePerHour Kč</span></p>
                            </div>

                            <div class="tags" @ref="tagsContainer">
                                <button class="prev_btn btn" @onclick="ScrollLeft"><i class="fa-solid fa-chevron-left"></i></button>

                                <span id="tags_size">
                                    @foreach (var tag in Tags)
                                    {
                                        <p class="tag">@tag.TagName</p>
                                    }
                                </span>

                                <button class="next_btn btn" @onclick="ScrollRight"><i class="fa-solid fa-chevron-right"></i></button>
                            </div>
                        </div>
                    }
                </div>
            }
        }

>>>>>>> 454a874caba37c3e8e281b6255e9f1647c3a4e24
    </main>
</body>

@code {
    private ElementReference tagsContainer;

    // filter on/off
    private bool IsFilteringOn;

    // prices - filtration
    private double minPriceOriginal;
    private double maxPriceOriginal;
    private double maxPrice;
    private double minPrice;

    // list of all prices for getting min and max price
    private List<double> Prices = new List<double>();

    // other filtration variables
    private static List<string> ChosenLocations = new List<string>();
    private List<string> ChosenTags = new List<string>();

    private List<Lector> allLectors = new List<Lector>();
    private List<Lector> specificLectors = new List<Lector>();

    // other variables
    private List<Tag> Tags = new List<Tag>();

    LectorService lectorService = new LectorService();

    private List<string> LocalChosenLocations => ChosenLocations;


    protected override async Task OnInitializedAsync()
    {
        FilterState();

        ChosenLocations = new List<string>();

        // filling prices for getting min/,ax
        foreach (Lector lector in allLectors)
        {
            Prices.Add(lector.pricePerHour);
        }

        // getting min and max prices
        if (Prices.Any())
        {
            minPriceOriginal = Prices.Min();
            maxPriceOriginal = Prices.Max();
        }

        // setting up filter properties normal value
        minPrice = minPriceOriginal;
        maxPrice = maxPriceOriginal;
    }


    private async void HandleValueFromChild(List<string> value)
    {
        ChosenLocations = value;
        specificLectors = await lectorService.GetSpecificLectorsAsync(minPrice, maxPrice, ChosenLocations, ChosenTags);
        FilterState();
        StateHasChanged();
    }

    // switching filtering on and off
    private async Task FilterState()
    {
        if (minPrice == minPriceOriginal && maxPrice == maxPriceOriginal && ChosenLocations.Any() == false && ChosenTags.Any() == false)
        {
            allLectors = await lectorService.GetAllLectorsAsync();
            IsFilteringOn = false;
        }
        else
        {
            allLectors = await lectorService.GetSpecificLectorsAsync(minPrice, maxPrice, ChosenLocations, ChosenTags);
            IsFilteringOn = true;
        }
    }

    private int clickCount = 0;
    private string priceMessage = "";

    private async Task ScrollLeft()
    {
        await js.InvokeVoidAsync("scrollLeftSmooth", tagsContainer);
    }

    private async Task ScrollRight()
    {
        await js.InvokeVoidAsync("scrollRightSmooth", tagsContainer);
    }
}