@using tda_proj.Model;
@using tda_proj.Service;


@page "/"
@inject IJSRuntime js;

<head>
    <link href="css/main-page.css" rel="stylesheet" />
</head>
<body>
    <main>
        @if (IsFilteringOn == false)
        {
            <h1>filtrování vypnuto</h1>

            <tda_proj.Components.Filter/>

            <div class="cards">


                @foreach (var lector in allLectors)
                {
                    Tags = lector.lectorTags.Select(lt => lt.Tag).ToList();

                    <div class="card">
                        <NavLink href=@($"lecturer/{lector.UUID}") class="info"><i class="fa-solid fa-circle-info"></i></NavLink>
                        <img src="@lector.pictureUrl">

                        @*  header *@
                        <h1 class="title">
                            @foreach (var titleBefore in lector.titlesBefore)
                            {
                                @titleBefore.Title
                            }

                            <h1>
                                @lector.firstName
                                @lector.middleName
                                @lector.lastName
                            </h1>

                            @foreach (var titleAfter in lector.titlesAfter)
                            {
                                @titleAfter.Title
                            }
                        </h1>


                        @* claim *@
                        <div class="subtitle">
                            @lector.claims;
                        </div>

                        <div class="contacts">
                            <p><span class="special_text1"><i class="fa-solid fa-location-dot fa-xl"></i></span>  @lector.location</p>
                            <p> | </p>
                            <p>Cena za hodinu: <span class="special_text1">@lector.pricePerHour Kč</span></p>
                        </div>

                        <div class="tags" @ref="tagsContainer">
                            <button class="prev_btn btn" @onclick="ScrollLeft"><i class="fa-solid fa-chevron-left"></i></button>

                            @foreach (var tag in Tags)
                            {
                                <p class="tag">@tag.TagName</p>
                            }

                            <button class="next_btn btn" @onclick="ScrollRight"><i class="fa-solid fa-chevron-right"></i></button>
                        </div>
                    </div>

                   
                }
            </div>
        }
        else
        {
            <h1>filtrování zapnuto!</h1>

            <tda_proj.Components.Filter/>

            <div class="cards">

                @foreach (var lector in specificLectors)
                {
                    Tags = lector.lectorTags.Select(lt => lt.Tag).ToList();

                    <div class="card">
                        <NavLink href=@($"lecturer/{lector.UUID}") class="info"><i class="fa-solid fa-circle-info"></i></NavLink>
                        <img src="@lector.pictureUrl">

                        @*  header *@
                        <h1 class="title">
                            @foreach (var titleBefore in lector.titlesBefore)
                            {
                                @titleBefore.Title
                            }

                            <h1>
                                @lector.firstName
                                @lector.middleName
                                @lector.lastName
                            </h1>

                            @foreach (var titleAfter in lector.titlesAfter)
                            {
                                @titleAfter.Title
                            }
                        </h1>


                        @* claim *@
                        <div class="subtitle">
                           @lector.claims;
                        </div>

                        <div class="contacts">
                            <p><span class="special_text1"><i class="fa-solid fa-location-dot fa-xl"></i></span>  @lector.location</p>
                            <p> | </p>
                            <p>Cena za hodinu: <span class="special_text1">@lector.pricePerHour Kč</span></p>
                        </div>

                        <div class="tags" @ref="tagsContainer">
                            <button class="prev_btn btn" @onclick="ScrollLeft"><i class="fa-solid fa-chevron-left"></i></button>

                            @foreach (var tag in Tags)
                            {
                                <p class="tag">@tag.TagName</p>
                            }

                            <button class="next_btn btn" @onclick="ScrollRight"><i class="fa-solid fa-chevron-right"></i></button>
                        </div>
                    </div>
                }
            </div>
        }
    </main>
</body>

@code {
    private ElementReference tagsContainer;

    // filter logic
    private bool IsFilteringOn;

    // prices - filtration 
    private double minPriceOriginal;
    private double maxPriceOriginal;
    private double maxPrice;
    private double minPrice;

    // list of all prices for getting min and max price
    private List<double> Prices = new List<double>();

    // other filtration variables
    private List<string> ChosenLocations = new List<string>();
    private List<string> ChosenTags = new List<string>();

    private List<Lector> allLectors = new List<Lector>();
    private List<Lector> specificLectors = new List<Lector>();

    // other variables
    private List<Tag> Tags = new List<Tag>();

    LectorService lectorService = new LectorService();


    protected override async Task OnInitializedAsync()
    {
        allLectors = await lectorService.GetAllLectorsAsync();


        // getting all prices into prices list 
        foreach (Lector lector in allLectors)
        {
            Prices.Add(lector.pricePerHour);
        }

        if (Prices.Any())
        {
            minPriceOriginal = Prices.Min();
            maxPriceOriginal = Prices.Max();
        }

        // setting up filter properties normal value
        minPrice = minPriceOriginal;
        maxPrice = maxPriceOriginal;


        // // variables to set filtration on
        // maxPrice = 1200;
        // ChosenTags.Add("Výzkum");
        // ChosenTags.Add("Moderní rozhraní");

        // ChosenLocations.Add("Liberec");

        // minPrice = 1300;

        // Check if filtering is on
        FilterState();      

        // in future wont be needed
        specificLectors = await lectorService.GetSpecificLectorsAsync(minPrice, maxPrice, ChosenLocations, ChosenTags);
    }

    // switching filtering on and off
    private void FilterState()
    {
        if (minPrice == minPriceOriginal && maxPrice == maxPriceOriginal && ChosenLocations.Any() == false && ChosenTags.Any() == false)
        {
            IsFilteringOn = false;
        }
        else
        {
            IsFilteringOn = true;
        }
    }

    private int clickCount = 0;
    private string priceMessage = "";  

    private async Task ScrollLeft()
    {
        await js.InvokeVoidAsync("scrollLeftSmooth", tagsContainer);
    }

    private async Task ScrollRight()
    {
        await js.InvokeVoidAsync("scrollRightSmooth", tagsContainer);
    }

    [JSInvokable]
    public void HandleMarkerClick(List<string> locations)
    {
        ChosenLocations = locations;
        FilterState();
    }
}