@using tda_proj.Model;
@using tda_proj.Service;


@page "/"
@inject IJSRuntime js;

<head>
    <link href="css/main-page.css" rel="stylesheet" />
</head>
<body>
    <main>
        @if (IsFilteringOn == false)
        {
            <h1>filtrování vypnuto</h1>

            /* filter bar */
            <div class="@(IsFilterShown ? "filter filter--open" : "filter")">
                <h2 class="filter_title"><i class="fa-solid fa-filter fa-xs"></i>Filtrace</h2>

                <div class="filter_main">
                    <i class="fa-solid fa-xmark x-mark" @onclick="ShowFilter"></i>
                    <h2 id="value_title">Cenové rozpětí</h2>

                    <div class="range_slider_container">
                        <div class="range_slider" id="rangeSlider">
                            <div class="range_slider_handle" id="handle1"></div>
                            <div class="range_slider_handle" id="handle2"></div>
                        </div>
                        <div class="range_slider_value">
                            <span class="value"><span id="value1"></span>,-</span>
                            <span class="value"><span id="value2"></span>,-</span>
                        </div>
                    </div>

                    <div @onclick="SwitchValues" class="filter_tags">
                        <h2>Tagy</h2>
                        <i class="fa fa-angle-down fa-2xl"></i>
                        <div id="filter_tags" class="filter_dropdown">
                        </div>
                    </div>

                    <div class="location">
                        <h2>Lokalita</h2>
                       <div id="map">

                       </div>
                    </div>
                </div>                 
            </div>               

            /* filter button */
            <button class="@(IsFilterShown ? "filter_btn filter_btn--hidden" : "filter_btn")" @onclick="ShowFilter"><i class="fa-solid fa-filter fa-2xl"></i></button>

            <div class="cards">


                @foreach (var lector in allLectors)
                {
                    Tags = lector.lectorTags.Select(lt => lt.Tag).ToList();

                    <div class="card">
                        <NavLink href=@($"lecturer/{lector.UUID}") class="info"><i class="fa-solid fa-circle-info"></i></NavLink>
                        <img src="@lector.pictureUrl">

                        @*  header *@
                        <h1 class="title">
                            @foreach (var titleBefore in lector.titlesBefore)
                            {
                                @titleBefore.Title
                            }

                            <h1>
                                @lector.firstName
                                @lector.middleName
                                @lector.lastName
                            </h1>

                            @foreach (var titleAfter in lector.titlesAfter)
                            {
                                @titleAfter.Title
                            }
                        </h1>


                        @* claim *@
                        <div class="subtitle">
                            @for (int i = 0; i < lector.claims.Count; i++)
                            {
                                @if (i < lector.claims.Count - 1)
                                {
                                    <p>@lector.claims[i].Name</p>
                                    <p> /</p>
                                }
                                else
                                {
                                    <p>@lector.claims[i].Name</p>
                                }
                            }
                        </div>

                        <div class="contacts">
                            <p><span class="special_text1"><i class="fa-solid fa-location-dot fa-xl"></i></span>  @lector.location</p>
                            <p> | </p>
                            <p>Cena za hodinu: <span class="special_text1">@lector.pricePerHour Kč</span></p>
                        </div>

                        <div class="tags" @ref="tagsContainer">
                            <button class="prev_btn btn" @onclick="ScrollLeft"><i class="fa-solid fa-chevron-left"></i></button>

                            @foreach (var tag in Tags)
                            {
                                <p class="tag">@tag.TagName</p>
                            }

                            <button class="next_btn btn" @onclick="ScrollRight"><i class="fa-solid fa-chevron-right"></i></button>
                        </div>
                    </div>

                   
                }
            </div>
        }
        else
        {
            <h1>filtrování zapnuto!</h1>

            /* filter bar */
            <div class="@(IsFilterShown ? "filter filter--open" : "filter")">
                <h2 class="filter_title"><i class="fa-solid fa-filter fa-xs"></i>Filtrace</h2>

                <div class="filter_main">
                    <i class="fa-solid fa-xmark x-mark" @onclick="ShowFilter"></i>
                    <h2 id="value_title">Cenové rozpětí</h2>

                    <div class="range_slider_container">
                        <div class="range_slider" id="rangeSlider">
                            <div class="range_slider_handle" id="handle1"></div>
                            <div class="range_slider_handle" id="handle2"></div>
                        </div>
                        <div class="range_slider_value">
                            <span class="value"><span id="value1"></span>,-</span>
                            <span class="value"><span id="value2"></span>,-</span>
                        </div>
                    </div>

                    <div @onclick="SwitchValues" class="filter_tags">
                        <h2>Tagy</h2>
                        <i class="fa fa-angle-down fa-2xl"></i>
                        <div id="filter_tags" class="filter_dropdown">
                        </div>
                    </div>

                    <div class="location">
                        <h2>Lokalita</h2>
                        <div id="map">
                        </div>
                    </div>
                </div>

            </div>

            /* filter button */
            <button class="@(IsFilterShown ? "filter_btn filter_btn--hidden" : "filter_btn")" @onclick="ShowFilter"><i class="fa-solid fa-filter fa-2xl"></i></button>


            <div class="cards">

                @foreach (var lector in specificLectors)
                {
                    Tags = lector.lectorTags.Select(lt => lt.Tag).ToList();

                    <div class="card">
                        <NavLink href=@($"lecturer/{lector.UUID}") class="info"><i class="fa-solid fa-circle-info"></i></NavLink>
                        <img src="@lector.pictureUrl">

                        @*  header *@
                        <h1 class="title">
                            @foreach (var titleBefore in lector.titlesBefore)
                            {
                                @titleBefore.Title
                            }

                            <h1>
                                @lector.firstName
                                @lector.middleName
                                @lector.lastName
                            </h1>

                            @foreach (var titleAfter in lector.titlesAfter)
                            {
                                @titleAfter.Title
                            }
                        </h1>


                        @* claim *@
                        <div class="subtitle">
                            @for (int i = 0; i < lector.claims.Count; i++)
                            {
                                @if (i < lector.claims.Count - 1)
                                {
                                    <p>@lector.claims[i].Name</p>
                                    <p> /</p>
                                }
                                else
                                {
                                    <p>@lector.claims[i].Name</p>
                                }
                            }
                        </div>

                        <div class="contacts">
                            <p><span class="special_text1"><i class="fa-solid fa-location-dot fa-xl"></i></span>  @lector.location</p>
                            <p> | </p>
                            <p>Cena za hodinu: <span class="special_text1">@lector.pricePerHour Kč</span></p>
                        </div>

                        <div class="tags" @ref="tagsContainer">
                            <button class="prev_btn btn" @onclick="ScrollLeft"><i class="fa-solid fa-chevron-left"></i></button>

                            @foreach (var tag in Tags)
                            {
                                <p class="tag">@tag.TagName</p>
                            }

                            <button class="next_btn btn" @onclick="ScrollRight"><i class="fa-solid fa-chevron-right"></i></button>
                        </div>
                    </div>
                }
            </div>
        }
    </main>
</body>



@code {
    private ElementReference tagsContainer;

    // opening of filter bar
    private bool IsFilterShown = false;

    // filter logic
    private bool IsFilteringOn;

    // prices - filtration 
    private double minPriceOriginal;
    private double maxPriceOriginal;
    private double maxPrice;
    private double minPrice;

    // list of all prices for getting min and max price
    private List<double> Prices = new List<double>();

    // other filtration variables
    private List<string> allLocations = new List<string>();
    private List<string> ChosenLocations = new List<string>();
    private List<string> ChosenTags = new List<string>();

    private List<Lector> allLectors = new List<Lector>();
    private List<Lector> specificLectors = new List<Lector>();

    // other variables
    private List<Tag> Tags = new List<Tag>();

    LectorService lectorService = new LectorService();


    protected override async Task OnInitializedAsync()
    {
        allLectors = await lectorService.GetAllLectorsAsync();

       

        // getting all prices into prices list 
        foreach (Lector lector in allLectors)
        {
            Prices.Add(lector.pricePerHour);
            allLocations.Add(lector.location);
        }

        if (Prices.Any())
        {
            minPriceOriginal = Prices.Min();
            maxPriceOriginal = Prices.Max();
        }

        // setting up filter properties normal value
        minPrice = minPriceOriginal;
        maxPrice = maxPriceOriginal;


        // // variables to set filtration on
        // maxPrice = 1200;

        ChosenLocations.Add("Ostrava");

        // Check if filtering is on
        FilterState();

        // in future wont be needed
        specificLectors = await lectorService.GetSpecificLectorsAsync(minPrice, maxPrice, ChosenLocations, ChosenTags);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        allLectors = await lectorService.GetAllLectorsAsync();       

        if (!firstRender)
        {
            await js.InvokeVoidAsync("initMap",allLocations);
        }
    }


    // showing filter bar
    private void ShowFilter()
    {
        IsFilterShown = !IsFilterShown;
    }

    // switching filtering on and off
    private void FilterState()
    {
        if (minPrice == minPriceOriginal && maxPrice == maxPriceOriginal && ChosenLocations.Any() == false && ChosenTags.Any() == false)
        {
            IsFilteringOn = false;
        }
        else
        {
            IsFilteringOn = true;
        }
    }
    private int clickCount = 0;
    private string priceMessage = "";

    // switching price values -- in future this method wont exist
    private async Task SwitchValues()
    {
        minPrice = (clickCount % 2 == 0 ? 400 : 200);

        priceMessage = "Minimální cena je " + minPrice;
        clickCount++;       

        FilterState();
        specificLectors = await lectorService.GetSpecificLectorsAsync(minPrice, maxPrice, ChosenLocations,ChosenTags);

        priceMessage += " počet lectorů v specificLectors " + specificLectors.Count;

        StateHasChanged();
    }

    private async Task ScrollLeft()
    {
        await js.InvokeVoidAsync("scrollLeftSmooth",tagsContainer);
    }
    
    private async Task ScrollRight()
    {
        await js.InvokeVoidAsync("scrollRightSmooth",tagsContainer);
    }
}